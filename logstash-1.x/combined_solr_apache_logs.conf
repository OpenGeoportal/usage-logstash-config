input {
   file 
    { 
    	 path => "/var/solr/logs/solr.log"
	 type => "solr"
    }
   file 
    {
	path => "/var/log/apache2/access.log" 
	type => "apache"
    }
}

filter {

if [type] == "solr"
{
    grok {
        match =>
            {"message" => "%{LOGLEVEL:log_level}  - %{TIMESTAMP_ISO8601:iso_time}; \[%{SPACE}%{DATA:core}\] %{DATA:java_class}; %{GREEDYDATA:piggy}"}
    }
    if [core] != "ogp" {
       drop {}
    }
    if [java_class] == "org.apache.solr.core.SolrCore" {
       kv {
       	   source => "piggy"
           field_split => "&?"
	   exclude_keys  => ["version", "rows"]
	      }
      }
    if [wt] == "xml"
    {
	if [q] =~ /.+/ {
	
        grok {
         match => {"q" => "%{WORD:querygoal}:%{WORD:Institution}.%{GREEDYDATA:LayerName}"}
         }
	 if [querygoal] == "Name"
	 {
	 mutate {
	      add_field => {"QueryType" => "Download"}
	 }
         }
	 if [querygoal] == "LayerId"
	 {
	 mutate {
	 add_field => {"QueryType" => "Metadata"}
	 }
	 }
	}
	else
	{
	grok {
	     match => {"piggy" => "\[ogp\] webapp=/solr path=/select params=\{q=LayerId:%{DATA:LayerId}&wt%{GREEDYDATA:ugh}"}
	     remove_field => ["ugh"]
	     }
	grok {
	     match => {"LayerId" => "%{WORD:Institution}.%{GREEDYDATA:LayerName}"}
	     add_field => {"QueryType" => "Feature"}
	     }
	}    
    }
    else
    {         	   
        grok {
	      match => {"y" => "max\(sub\(min\(%{BASE10NUM:MaxY},MaxY\),max\(%{BASE10NUM:MinY}%{GREEDYDATA:ugh}"}
	     remove_field => ["ugh"]
	     } 
	grok {
	      match => {"intx" => "product\(max\(sub\(min\(%{BASE10NUM:MaxX},MaxX\),max\(%{BASE10NUM:MinX},MinX\)\),0\),\$y\)"}
              add_field => {"QueryType" => "Search"}
	    }
	mutate {
	      gsub => ["q", "\+", " "]
	}
	if [where] =~ /.+/ {
	grok {
	     match => {"where" => "\{\!query\}LayerDisplayNameSynonyms:%{DATA:Where1}\^1\+LayerDisplayName:\"%{DATA:WherePhrase}\"\^2"} 
	}
	mutate { gsub => ["WherePhrase", "\+", " "]}
	}
    }
    date {
         match => ["iso_time", "ISO8601"]
    }    
}
if [type] == "apache"
{
    grok {
        match =>
            {"message" => "%{COMBINEDAPACHELOG:full_log}"}
    }
    geoip {
       source => "clientip"
     add_field => { "geoip_region_name" => "%{[geoip][region_name]}" }
     add_field => { "geoip_city_name" => "%{[geoip][city_name]}" }
     add_field => { "geoip_country_code2" => "%{[geoip][country_code2]}"}
     add_field => { "geoip_location" => "%{[geoip][location]}"}
     add_field => { "geoip_lat" => "%{[geoip][latitude]}"}
     add_field => { "geoip_lon" => "%{[geoip][longitude]}"}
    }
     kv {
           source => "request"
           prefix => "request_"
           field_split => "&?"
     }
     if [request_ogpid] =~ /.+/
     {
        if [request_pixel] =~ /.+/
        {
                 mutate{ add_field => {"request_type" => "featureID"}}

        }
        else
        {
                mutate{ add_field => {"request_type" => "WMS"}}
        }
        grok {
                match => {"request_ogpid" => "%{WORD:request_Institution}.%{GREEDYDATA:request_LayerName}"}
        }
     }
     if [request_download] == "true"
     {
        mutate {add_field => {"request_type" => "MetadataDownload"}}
        grok {
               match => {"request_id" => "%{WORD:request_Institution}.%{GREEDYDATA:request_LayerName}"}
        }
     }
     useragent{
        prefix => "useragent_"
        source => "agent"
     }
     date {
     	  match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
     }
       
}



}

output { 
    stdout { codec => "rubydebug" }
    solr_http { solr_url => "http://localhost:8983/solr/logstash_logs" flush_size => 25 }    
}