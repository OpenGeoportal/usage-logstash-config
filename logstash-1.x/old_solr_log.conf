input {
    file { path => "/home/ubuntu/solr.log" 
    	   type => "solr_old"
	   codec => multiline {
	   	    pattern => "INFO:"
		    what => "previous"
	   	    }
	   sincedb_path => "/dev/null"
	   start_position => "beginning"
	   }
}

filter {

    grok {
        match =>
            {"message" => "%{GREEDYDATA:time} %{JAVACLASS} execute\n%{LOGLEVEL:log_level}: \[%{DATA:core}\] webapp=/solr path=/%{DATA:selectpath} params=\{%{GREEDYDATA:piggy}"}
    }
    if [core] != "collection1" {
       drop {}
    }

       kv {
       	   source => "piggy"
           field_split => "&?"
	   exclude_keys  => ["version"]
	      }
if [defType] == "edismax"
{
mutate {
       add_field => {"queryOrigin" => "OGP2"}
       add_field => {"QueryType" => "Search"}
       }
        if [y] =~ /.+/
	{
	grok {
              match => {"y" => "max\(sub\(min\(%{BASE10NUM:MaxY},MaxY\),max\(%{BASE10NUM:MinY}%{GREEDYDATA}"}
             }
        grok {
              match => {"intx" => "product\(max\(sub\(min\(%{BASE10NUM:MaxX},MaxX\),max\(%{BASE10NUM:MinX},MinX\)\),0\),y\)"}
            }
        mutate {
              gsub => ["q", "\+", " "]
        }
        if [where] =~ /.+/ {
        grok {
             match => {"where" => "\{\!query\}LayerDisplayNameSynonyms:%{DATA:Where1}\^1\+LayerDisplayName:\"%{DATA:WhereP\
hrase}\"\^2"}
        }
        mutate { gsub => ["WherePhrase", "\+", " "]}
        }
	}
	else
	{
	grok {
	     match => {"intx" => "product\(max\(0,sub\(min\(%{BASE10NUM:MaxX},MaxX\),max\(%{BASE10NUM:MinX},MinX\)\)\),max\(0,sub\(min\(%{BASE10NUM:MaxY},MaxY\),max\(%{BASE10NUM:MinY},MinY\)\)\)\)"}
	     }
	mutate {
              gsub => ["q", "\+", " "]
	       add_field => {"SearchPhrase" => "%{[q]}"}
	       }
	       	
	}
drop{}
}
else
{

mutate {
       #add_field => {"queryOrigin" => "OGP1"}
       }

      if [selectpath] == "select"
      {
	if [q] =~ /.+/ {
	   if [rows] == "1"
	   {
		if [q] =~ /\*.+/
		{
		drop{}
		}
#	   mutate {add_field => {"QueryType" => "OGP2Metadata"}}
	   mutate {add_field => {"queryOrigin" => "OGP2"}}
	   }
	grok {
	     match => {"q" => "ExternalLayerId:%{INT:ExternalLayerId}"}
	     add_field => {"QueryType" => "ExternalLayerId"}
	     add_field => {"queryOrigin" => "OGP1"}
	}
        grok {
         match => {"q" => "%{WORD:querygoal}:%{WORD:Institution}.%{GREEDYDATA:LayerName}\}%{GREEDYDATA}"}

	#match => {"q" => "%{WORD:querygoal}:%{NOPE:LayerName}\}%{GREEDYDATA}"}
         }
	 
	 if [querygoal] == "Name"
	 {
	 mutate {
	      add_field => {"QueryType" => "Download"}
	#      add_field => {"Institution" => "UCBerkeley"}
	 }
		if [queryOrigin] != "OGP2"
		{
		mutate { add_field => {"queryOrigin" => "OGP1"}}
		}
	 
         }
         if [fl] == "FgdcText" and [QueryType] != "Download"
         {
         mutate {
         add_field => {"QueryType" => "Metadata"}
         }
         }

	 if [fl] == "LayerId,FgdcText" and [QueryType] != "Download"
	 {
	   mutate {
	   add_field => {"QueryType" => "Metadata"}
	   add_field => {"queryOrigin" => "OGP1"}
	   }
	 }

	 if [querygoal] == "LayerId"
	 {
	 mutate {
	 #add_field => {"QueryType" => "Metadata"}
	 }
	 
	 }
	if [queryOrigin] != "OGP2"
	{
	grok {
	     match => {"piggy" => "%{DATA}q=LayerId:%{DATA:LayerId}\}%{GREEDYDATA}"}
	    # remove_field => ["ugh"]
	     }
	grok {
	     match => {"LayerId" => "%{WORD:Institution}.%{GREEDYDATA:LayerName}&%{GREEDYDATA}"}
	     add_field => {"QueryType" => "Feature"}
	     }
	     
	} 
	}
	}   

      if [start] =~ /.+/
      {
#      	   drop{}
        grok {
	      match => {"q" => "%{GREEDYDATA}map\(MinY,%{BASE10NUM:MinY},%{BASE10NUM:MaxY},1,0\)%{GREEDYDATA}"}
	    # remove_field => ["ugh"]
	     } 
	grok {
	      match => {"q" => "%{GREEDYDATA}product\(9.0,map\(sum\(map\(MinX,%{BASE10NUM:MinX},%{BASE10NUM:MaxX},1,0\),%{GREEDYDATA}"}
              add_field => {"queryOrigin" => "OGP1"}
	      add_field => {"QueryType" => "Search"}
	    }
	if [pf][0] =~ /.+/
	{
	mutate {
	      add_field => {"searchterm" => "%{[pf][0]}"}
	      gsub => ["searchterm", "\+", " "]
	}
	}
	else
	{
	 mutate{ add_field => {"SearchPhrase" => "*"}}
	}
	if [searchterm] =~ /.+/ {
	grok {
	     match => {"searchterm" => "LayerDisplayName:\'%{DATA:SearchPhrase}\'\^9.0"} 
	}
	mutate { gsub => ["SearchPhrase", "\+", " "]}
	}
	}
}  
if [queryOrigin] == "OGP2"
{
drop{}
}  
if [QueryType] == "Download"
{
drop{}
}
if [QueryType] == "Feature"
{
drop{}
}
if [QueryType] == "Metadata"
{
drop{}
}
if [QueryType] == "Search"
{
drop{}
}
if [QueryType] != "ExternalLayerId"
{
drop{}
}
    date {
    match => ["time", "MMM dd, yyyy HH:mm:ss a", "MMM dd, yyyy H:mm:ss a"]
    }
}

output { 
    stdout { codec => "rubydebug" }
    solr_http { solr_url => "http://localhost:8983/solr/logstash_logs2" flush_size => 25 }    
}