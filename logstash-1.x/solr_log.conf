input {
    file { path => "/var/solr/logs/solr.log" }
}

filter {

    grok {
        match =>
            {"message" => "%{LOGLEVEL:log_level}  - %{TIMESTAMP_ISO8601:iso_time}; \[%{SPACE}%{DATA:core}\] %{DATA:java_class}; %{GREEDYDATA:piggy}"}
    }
    if [core] != "ogp" {
       drop {}
    }
    if [java_class] == "org.apache.solr.core.SolrCore" {
       kv {
       	   source => "piggy"
           field_split => "&?"
	   exclude_keys  => ["version", "rows"]
	      }
      }
    if [wt] == "xml"
    {
	if [q] =~ /.+/ {
	
        grok {
         match => {"q" => "%{WORD:querygoal}:%{WORD:Institution}.%{GREEDYDATA:LayerName}"}
         }
	 if [querygoal] == "Name"
	 {
	 mutate {
	      add_field => {"QueryType" => "Download"}
	 }
         }
	 if [querygoal] == "LayerId"
	 {
	 mutate {
	 add_field => {"QueryType" => "Metadata"}
	 }
	 }
	}
	else
	{
	grok {
	     match => {"piggy" => "\[ogp\] webapp=/solr path=/select params=\{q=LayerId:%{DATA:LayerId}&wt%{GREEDYDATA:ugh}"}
	     remove_field => ["ugh"]
	     }
	grok {
	     match => {"LayerId" => "%{WORD:Institution}.%{GREEDYDATA:LayerName}"}
	     add_field => {"QueryType" => "Feature"}
	     }
	}    
    }
    else
    {         	   
        grok {
	      match => {"y" => "max\(sub\(min\(%{BASE10NUM:MaxY},MaxY\),max\(%{BASE10NUM:MinY}%{GREEDYDATA:ugh}"}
	     remove_field => ["ugh"]
	     } 
	grok {
	      match => {"intx" => "product\(max\(sub\(min\(%{BASE10NUM:MaxX},MaxX\),max\(%{BASE10NUM:MinX},MinX\)\),0\),\$y\)"}
              add_field => {"QueryType" => "Search"}
	    }
	mutate {
	      gsub => ["q", "\+", " "]
	}
	if [where] =~ /.+/ {
	grok {
	     match => {"where" => "\{\!query\}LayerDisplayNameSynonyms:%{DATA:Where1}\^1\+LayerDisplayName:\"%{DATA:WherePhrase}\"\^2"} 
	}
	mutate { gsub => ["WherePhrase", "\+", " "]}
	}
    }    
    date {
    	 match => ["iso_time", "ISO8601"]
    }

}

output { 
    stdout { codec => "rubydebug" }
#    solr_http { solr_url => "http://localhost:8983/solr/logstash_logs" flush_size => 25 }    
}