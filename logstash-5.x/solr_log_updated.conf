input {
	# set the SOLR_LOG_PATH and OGP_LOG_PATH env variable 
    file { 
    	path => "${SOLR_LOG_PATH:/usr/local/solr-6.5.0/server/logs/solr.log}" 
    	type => "solr_log"
	}

	file { 
    	path => "${OGP_LOG_PATH:/usr/local/logs/ogp_tomcat/tomcat6.out}" 
    	type => "ogp_log"
	}
}

filter {

	if [type] == "solr_log" {
		# parse the log line into basic components
	    dissect {
	    	mapping => { "message" => "%{ts} %{+ts} %{log_level}  (%{pid}) [%{garbage}] %{java_class} [%{core}]  %{query_body}"}
	    }

	    # drop events not related to the ogp core. can be set as an environment var, defaults to 'ogp'
	    if [core] != "ogp" {
	    	drop {}
	    }
#2017-06-23 21:31:55.900
		date {
    		match => [ "ts", "yyyy-MM-dd HH:mm:ss.SSS", "ISO8601"]
    		locale => "en"
    		timezone => "UTC"
    	}

	    kv {
	    	prefix => "query_"
	    	trim_value => "<>\[\]{},"
	    }

	    if [query_path] != "/select" {
	    	drop {}
	    }

	    if [query_params] {
	       kv {
	       	   	source => "query_params"
	           	field_split => "&?"
	           	exclude_keys => [ "_", "indent", "json.wrf", "version"]
	           	allow_duplicate_values => true
	           	prefix => "param_"
		      }
	    }

	    # certain requests use xml response type
	    if [param_wt] == "xml" {

			if [param_q] =~ /.+/ {
		
	    	    grok {
	        	 	match => {"param_q" => "%{WORD:querygoal}:%{WORD:institution}.%{GREEDYDATA:layer_name}"}
	        	 	add_tag => [ "querygoal_added" ]

	         	}
		 
		 		if [querygoal] == "Name" {
		 			mutate {
		      			add_field => {"user_action" => "download"}
		 			}
	        	}

		 		if [querygoal] == "LayerId" {
		 			if [param_fl] == "FgdcText" {
			 			mutate {
			 				add_field => {"user_action" => "metadata"}
			 			}
		 			} else {
		 				mutate {
			 				add_field => {"user_action" => "layerid_lookup"}
			 			}
		 			}

		 		}

			} else {

				grok {
		    		match => {"query_params" => "q=LayerId:%{DATA:layer_id}&wt%{GREEDYDATA:garbage}"}
		     		remove_field => ["garbage"]
		     		add_tag => [ "xml_noqmatch" ]

		    	}
		    	# this doesn't properly handle the case of multiple layer names or other info afterwards
				grok {
		     		match => {"layer_id" => "%{WORD:institution}.%{GREEDYDATA:layer_name}"}
		     		add_field => {"user_action" => "feature"}
		    	}
			}    

	    } else if [param_wt] == "json" {         	

	    	if [param_y] {
	     	   grok {
		    		match => {"param_y" => "max\(sub\(min\(%{BASE10NUM:MaxY},MaxY\),max\(%{BASE10NUM:MinY}%{GREEDYDATA:garbage}"}
		     		remove_field => ["garbage"]
		    	} 

		    	if [param_intx] {
					grok {
		      			match => {"param_intx" => "product\(max\(sub\(min\(%{BASE10NUM:MaxX},MaxX\),max\(%{BASE10NUM:MinX},MinX\)\),0\),\$y\)"}
	            		add_field => {"user_action" => "search"}
	            		add_tag => [ "spatial" ]
		    		}
				}

			} else if [param_intx] {
				# "product(max(0,sub(min(180,MaxX),max(-180,MinX))),max(0,sub(min(90,MaxY),max(-90,MinY))))"
				grok {
		      		match => {"param_intx" => "product\(max\(0,sub\(min\(%{BASE10NUM:maxx},MaxX\),max\(%{BASE10NUM:minx},MinX\)\)\),max\(0,sub\(min\(%{BASE10NUM:maxy},MaxY\),max\(%{BASE10NUM:miny},MinY\)\)\)\)"}
	            	add_field => {"user_action" => "search"}
	            	add_tag => [ "spatial" ]
		    	}
			}
			
			if [minx] {

				mutate {
					add_field => {"search_box_srpt" => "ENVELOPE(%{[minx]}, %{[maxx]}, %{[maxy]}, %{[miny]})"}
				}
			}

			mutate {
		    	gsub => ["param_q", "\+", " "]
		    	add_tag => [ "json_format" ]

			}

			if [param_where] =~ /.+/ {
				grok {
		     		match => {"param_where" => "\{\!query\}LayerDisplayNameSynonyms:%{DATA:Where1}\^1\+LayerDisplayName:\"%{DATA:WherePhrase}\"\^2"} 
				}

				mutate { gsub => ["WherePhrase", "\+", " "]}
			}

	    }

	    if [user_action] == "search"{
	    	if [param_start] == "0" {
		    	mutate {
		    		add_tag => ["new_search"]
		    	}
	    	} else {
	    		mutate {
		    		add_tag => ["paging"]
		    	}
	    	}
	    }
	   


	  	mutate {
	    	remove_field => [ "query_webapp", "query_body", "param_bf", "param_intx", "query_params", "garbage", "param_wt", "query_status", "pid", "host", "path", "java_class", "ts" ]
	  	}


	  	# layerid_lookup is used for several different actions. can we differentiate?
	  	#if [user_action] == "metadata" {
		# 	aggregate {
		#   		task_id => "%{user_action}"
		#   		code => "
		#   			event.to_hash.each { |k, v| map[k] = v}
		#   			event.cancel()
		#   			"
	    #		push_map_as_event_on_timeout => true
		#   		timeout => 0.5
		# 	}
	 	#}
	 } else if [type] == "ogp_log" {
		# parse the log line into basic components
		# 2017-06-23 11:39:47 RequestMappingHandlerMapping [INFO] Mapped "
	    dissect {
	    	mapping => { "message" => "%{ts} %{+ts} %{java_class} [%{log_level}] %{msg_body}"}
	    }

	    if [log_level] == "" {
	    	drop {}
	    }

	    # replace @timestamp with event time
	    date {
    		match => [ "ts", "yyyy-MM-dd HH:mm:ss", "ISO8601"]
    		locale => "en"
    		timezone => "UTC"
		}

	    mutate {
	    	remove_field => [ "host", "ts" ]
	  	}

	    if [java_class] in ["WmsDescribeLayer", "GetFeatureInfoController"] {

	    	if [java_class] == "GetFeatureInfoController" {
	    		mutate {
	    			add_field => {"user_action" => "getfeatureinfo"}
	    		}
	    		# "executing WMS getFeatureRequest: http://arrowsmith.mit.edu:8080/geoserver/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&INFO_FORMAT=text/html&SRS=EPSG:900913&FEATURE_COUNT=1&STYLES=&HEIGHT=512&WIDTH=1317&BBOX=-51541793.913633,-20037508.34,51541793.913633,20037508.34&X=762&Y=186&QUERY_LAYERS=sde:SDE_DATA.INT_F7POLBND_2003&LAYERS=sde:SDE_DATA.INT_F7POLBND_2003&EXCEPTIONS=application/vnd.ogc.se_xml"
	    		grok {
	    			match => {"msg_body" => "%{DATA}: http?://%{URIHOST:host}?(?:%{URIPATH})?(?:%{URIPARAM:gf_params})?"}
	    		}

	    		if [gf_params] {
	    			kv {
	       	   			source => "gf_params"
	           			field_split => "&?"
	           			transform_key => "lowercase"
	           			include_keys => ["layers"]
	           			allow_duplicate_values => true
		      		}
	    		}
	    	}

	    	# parse the message for a layer name : "sde:SDE_DATA.INT_F7POLBND_2003"
	    	# or OgpUtils java_class, "Combined URL: http://arrowsmith.mit.edu:8080/geoserver/wms?service=WMS&version=1.1.1&request=DescribeLayer&layers=sde:SDE_DATA.INT_F7POLBND_2003"

	    	mutate {
	    		remove_field => [ "msg_body", "gf_params", "port", "path", "java_class" ]
	  		}
	    } else {
	    	drop {}
	    }


 	}
 	
 	# prepare for ingest to solr  
    uuid {
    	target => "document_id"
  	}

  	mutate {
  		rename => { "user_action" => "user_action_s" }
  		rename => { "type" => "type_s" }
  		rename => { "core" => "core_s" }
  		rename => { "tags" => "tags_ss" }
  		rename => { "message" => "message_s" }
  		rename => { "param_q" => "param_q_s" }
  		rename => { "query_QTime" => "qtime_d" }
  		rename => { "query_hits" => "query_hits_i" }
  		rename => { "query_path" => "query_path_s" }
  		rename => { "param_rows" => "param_rows_i" }
  		rename => { "param_start" => "param_start_i" }
  		rename => { "param_sort" => "param_sort_s" }
  		rename => { "param_defType" => "param_deftype_s" }
  		rename => { "param_qf" => "param_qf_s" }
  		rename => { "minx" => "minx_d" }
  		rename => { "maxx" => "maxx_d" }
  		rename => { "miny" => "miny_d" }
  		rename => { "maxy" => "maxy_d" }
  		rename => { "log_level" => "log_level_s" }
  		rename => { "param_fl" => "param_fl_s" }
  		rename => { "param_fq" => "param_fq_ss" }
  		rename => { "layer_name" => "layer_name_ss" }
  		rename => { "institution" => "institution_ss" }
  		rename => { "querygoal" => "query_goal_s" }

  	}

}

output { 
    stdout { codec => "rubydebug" }
    solr_http { solr_url => "http://localhost:8983/solr/logstash_logs" flush_size => 25 }    
}